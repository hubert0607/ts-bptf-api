{
    "openapi": "3.0.0",
    "info": {
        "title": "backpack.tf public API",
        "description": "This is the documentation for the public backpack.tf web APIs.\nSeveral different auth methods are available, which allow access to different APIs.\nCheck the developer portal for information on WebAPI keys and user tokens. If you are signed in to backpack.tf on your browser, you can test user token APIs here.",
        "version": "various"
    },
    "servers": [
        {
            "url": "https://backpack.tf/api",
            "description": "backpack.tf"
        },
        {
            "url": "http://backpack.test:5002/api",
            "description": "backpack.test:5002"
        }
    ],
    "paths": {
        "/api": {},
        "/classifieds/alerts/{id}": {
            "get": {
                "tags": [
                    "alerts"
                ],
                "summary": "Get alert",
                "description": "Get an alert by ID.",
                "operationId": "2cd939a392658388b6c3947c05919718",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Object ID.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Object does not exist"
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "alerts"
                ],
                "summary": "Delete alert",
                "description": "Delete an alert by ID. Supply an asterisk (*) to delete all alerts..",
                "operationId": "c556d6678068f45f9e2cac8a0c1668b7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Object ID.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Object does not exist"
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/classifieds/alerts": {
            "get": {
                "tags": [
                    "alerts"
                ],
                "summary": "Get alerts",
                "description": "Get an alerts array.",
                "operationId": "727e088d7b099c41130e8e0f644abe79",
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Offset at which to return results.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Result count.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "alerts"
                ],
                "summary": "Create alert",
                "description": "Create an alert from an item name.",
                "operationId": "ef733d4b589693049f68fb99364ede91",
                "parameters": [
                    {
                        "name": "item_name",
                        "in": "query",
                        "description": "Item name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "intent",
                        "in": "query",
                        "description": "Listing intent.",
                        "schema": {
                            "$ref": "#/components/schemas/listingIntent"
                        }
                    },
                    {
                        "name": "currency",
                        "in": "query",
                        "description": "Currency name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min",
                        "in": "query",
                        "description": "Min currency value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "max",
                        "in": "query",
                        "description": "Max currency value.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "blanket",
                        "in": "query",
                        "description": "If set, creates an alert for any listing.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "alerts"
                ],
                "summary": "Delete an alert by item name and intent",
                "description": "Delete a listing alert using the item name and intent, instead of the alert ID.",
                "operationId": "0e4d692acac455ead715462ef5901cac",
                "parameters": [
                    {
                        "name": "item_name",
                        "in": "query",
                        "description": "Item name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "intent",
                        "in": "query",
                        "description": "Listing intent.",
                        "schema": {
                            "$ref": "#/components/schemas/listingIntent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Alert matching these parameters cannot be found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/classifieds/listings/v1": {
            "get": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Get session user listings",
                "description": "This API is being removed and is heavily rate limited to encourage moving to the new API layer; do not create anything new with it.",
                "externalDocs": {
                    "description": "Classic docs",
                    "url": "https://backpack.tf/api/docs/my_listings"
                },
                "operationId": "ba4b4d4dd631aec5de182a86e8a126c8",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/classifieds/delete/v1": {
            "delete": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Bulk delete listings",
                "description": "This API is being removed and is heavily rate limited to encourage moving to the new API layer; do not create anything new with it.",
                "operationId": "4a406e904684fad44a91f1896cb0cfdf",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/classifieds/list/v1": {
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Bulk create classifieds listings",
                "description": "This API is being removed and is heavily rate limited to encourage moving to the new API layer; do not create anything new with it.",
                "externalDocs": {
                    "description": "Classic docs",
                    "url": "https://backpack.tf/api/docs/create_listings"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/": {
            "get": {
                "tags": [
                    "index"
                ],
                "summary": "Get client info",
                "description": "Get information on the user session.",
                "operationId": "3b2bd207fe34c000a34ddfb9013c71a1",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/inventory/{steamid}/values": {
            "get": {
                "tags": [
                    "inventory"
                ],
                "summary": "Get inventory values.",
                "description": "Return value totals for this inventory without executing a refresh.",
                "operationId": "cb5542add4919484fb2f2da425516dbe",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inventoryValues"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/inventory/{steamid}/status": {
            "get": {
                "tags": [
                    "inventory"
                ],
                "summary": "Get the status of an inventory.",
                "description": "Returns some information about a user's inventory without executing a refresh.\n\n    The backpack.tf inventory APIs are kept lightweight as they are designed for a specific use case. If you wish to fetch inventory data, it should be done from Steam's own APIs.",
                "operationId": "6e6efe3305cb639d284528be655bd8d9",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inventoryStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/inventory/{steamid}/refresh": {
            "post": {
                "tags": [
                    "inventory"
                ],
                "summary": "Refresh an inventory.",
                "description": "Requests a refresh of an inventory and returns a status object.\n\n    The backpack.tf inventory APIs are kept lightweight as they are designed for a specific use case. If you wish to fetch inventory data, it should be done from Steam's own APIs.\n\n    As of 24 June, 2023, this endpoint is non-blocking. A request is made and a result will be processed in the backend. You should poll this endpoint if you want to find out whether an update has occurred.",
                "operationId": "43f608d5b12ab74c74d5cbf13f308d60",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/inventoryStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications/{id}": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "Get notification",
                "description": "Get a notification by ID.",
                "operationId": "c17e601700791645c8426f3583062748",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Object ID.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Object does not exist"
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "notifications"
                ],
                "summary": "Delete notification",
                "description": "Delete a notification by ID.",
                "operationId": "bb730f1b8205c58b78e42e9e04a9f1ef",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Object ID.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Object does not exist"
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "summary": "Get notifications",
                "description": "Get user notifications. Optionally, filter for unread notifications only.",
                "operationId": "80c3ae1bcc08ce76afc171f574f24726",
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Offset at which to return results.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Result count.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "unread",
                        "in": "query",
                        "description": "If set, only return unread notifications.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications/unread": {
            "post": {
                "tags": [
                    "notifications"
                ],
                "summary": "Get unread notifications and mark them as read",
                "description": "Get an array of unread notifications, and mark them as read as if the notifications page was viewed. Since this endpoint modifies data, it is implemented as POST and not GET.",
                "operationId": "5237fd8ec7d8b6694fbe3bdff5bc013d",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications/mark": {
            "post": {
                "tags": [
                    "notifications"
                ],
                "summary": "Mark unread notifications as read",
                "description": "Mark unread notifications as read.",
                "operationId": "dd2c8f71b32b8a75022573263aeff515",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/notificationMarkState"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/agent/pulse": {
            "post": {
                "tags": [
                    "agent"
                ],
                "summary": "(Re)-register a user agent",
                "description": "Refresh the user's status as being under control of a user agent for another 30 minutes.\n\n    The user-agent header will be used to determine the name of this agent.\n    This value will be trimmed to 128 character.\n\n    Will bump this user's listings.\n    ",
                "operationId": "3c5b4eb00478b3e5f9a74b8bc7c354a3",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/userAgentStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/agent/stop": {
            "post": {
                "tags": [
                    "agent"
                ],
                "summary": "Unregister a user agent",
                "description": "Prematurely declare the user as no longer being under control of the user agent. Should be used as part of a clean shutdown.",
                "operationId": "3d7140188d25c28b9c9e58f799b03166",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/userAgentStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/agent/status": {
            "post": {
                "tags": [
                    "agent"
                ],
                "summary": "Get agent status",
                "description": "Return the status of the user.",
                "operationId": "d42d3012cbdbbfd63e0ea45e452a929f",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/userAgentStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/users/info/v1": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get user info",
                "description": "Get user info. This will probably be replaced with a more fragmented set of APIs, since it returns way too much. These docs are not complete, so refer to classic docs.",
                "externalDocs": {
                    "description": "Classic docs",
                    "url": "https://backpack.tf/api/docs/user_info"
                },
                "operationId": "21afe154c2db094e2359875d926efd39",
                "parameters": [
                    {
                        "name": "steamids",
                        "in": "query",
                        "description": "Comma-delimited list of SteamIDs (;_;)",
                        "schema": {
                            "type": "string",
                            "example": "76561198012598620"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "users": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/v1User"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/IGetCurrencies/v1": {
            "get": {
                "tags": [
                    "webapi-economy"
                ],
                "summary": "Returns internal currency data for a given game",
                "operationId": "e9cfcbbbebbce260f6a6ec9af3fca9b7",
                "parameters": [
                    {
                        "name": "raw",
                        "in": "query",
                        "description": "\n    If set to 1, adds a value_raw to the priceindex objects which represents the value of the item\n    in the lowest currency without rounding. If a high value is set, the raw value will be an average\n    between the low and high value. Setting raw to 2 prevents this behaviour by adding a new field, value_raw_high.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "description": "1 if successful, 0 otherwise.",
                                            "type": "integer"
                                        },
                                        "message": {
                                            "description": "If success is 0, this contains the reason for failure.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "App name",
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "URL for the related backpack.tf app.",
                                            "type": "string"
                                        },
                                        "currencies": {
                                            "description": "An array of currency objects.",
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/currency"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/IGetPriceHistory/v1": {
            "get": {
                "tags": [
                    "webapi-economy"
                ],
                "summary": "Returns price history for an item",
                "operationId": "cfbcd95e88bb05641fa3f559189047eb",
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "Item appid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "item",
                        "in": "query",
                        "description": "Base item name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "quality",
                        "in": "query",
                        "description": "Item quality.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tradable",
                        "in": "query",
                        "description": "Tradable state.",
                        "schema": {
                            "$ref": "#/components/schemas/tradableEnum"
                        }
                    },
                    {
                        "name": "craftable",
                        "in": "query",
                        "description": "Craftable state.",
                        "schema": {
                            "$ref": "#/components/schemas/craftableEnum"
                        }
                    },
                    {
                        "name": "priceindex",
                        "in": "query",
                        "description": "Priceindex.",
                        "schema": {
                            "$ref": "#/components/schemas/priceindex"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v1PriceHistoryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/IGetPrices/v4": {
            "get": {
                "tags": [
                    "webapi-economy"
                ],
                "summary": "Get price schema",
                "description": "Won't work for games that aren't TF2. The response from this API is cached globally for 900 seconds.",
                "operationId": "1f3531f90e005bb62dce8d130ae06de8",
                "parameters": [
                    {
                        "name": "raw",
                        "in": "query",
                        "description": "If set to 1, adds a value_raw to the priceindex objects which represents the\n    value of the item\n    in the lowest currency without rounding. If a high value is set, the raw value will be an average\n    between the\n    low and high value. Setting raw to 2 prevents this behaviour by adding a new field, value_high_raw.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "since",
                        "in": "query",
                        "description": "If set, only returns prices that have a last_update value greater than or\n    equal to this\n    UNIX time. Recommended for implementing delta updates,\n    as this will reduce the bandwidth requirements of your client.",
                        "schema": {
                            "type": "integer",
                            "example": 1999999999
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/v4PricesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/IGetSpecialItems/v1": {
            "get": {
                "tags": [
                    "webapi-economy"
                ],
                "summary": "Get special internal items",
                "description": "Returns internal backpack.tf item placeholders for a given game.",
                "operationId": "3e9f3da2d0f3c1316de7af0a7a449a38",
                "parameters": [
                    {
                        "name": "appid",
                        "in": "query",
                        "description": "Appid",
                        "schema": {
                            "$ref": "#/components/schemas/appid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/specialItemsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/IGetUsers/v3": {
            "get": {
                "tags": [
                    "webapi-users"
                ],
                "summary": "Get user data",
                "description": "get a list of users.",
                "operationId": "800c12bc395d28d411e61a7aa5da1d9c",
                "parameters": [
                    {
                        "name": "steamid",
                        "in": "query",
                        "description": "String-delimited list of SteamIDs to get information for (yes, I know, this API is old).",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "steamids",
                        "in": "query",
                        "description": "Alias of the steamid parameter.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/IGetUsers/GetImpersonatedUsers": {
            "get": {
                "tags": [
                    "webapi-users"
                ],
                "summary": "Get impersonated users",
                "description": "Get a list of impersonated users. Impersonated users are defined as having the banner on their backpack.tf profile.",
                "operationId": "8fb7383767edec54659593dcbf86403c",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of results to return for paging.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Skip value for paging.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/impersonatedUser"
                                            }
                                        },
                                        "total": {
                                            "description": "Total number of impersonated users, for paging",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/classifieds/archive": {
            "get": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Get account archived listings",
                "description": "Get a scrollable cursor of listings for this account.",
                "parameters": [
                    {
                        "$ref": "#components/parameters/skip"
                    },
                    {
                        "$ref": "#components/parameters/limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listingScrollable"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Delete all archived listings",
                "description": "Delete all listings. You are not expected to call this endpoint often, so there is a 1-minute cooldown. You may specify an intent.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/listingDropRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/archive/batch": {
            "get": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Get batch operation limit",
                "description": "An auxiliary endpoint that just returns a limit counter.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Batch delete archived listings",
                "description": "Batch delete listings. This endpoint is rate limited to 10 req/minute.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/archive/{listingId}": {
            "get": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Get one archived listing",
                "description": "Get one listing by ID, whether it exists in the active pool or in the archive.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Delete one archived listing",
                "description": "Delete one listing by ID, whether it exists in the active pool or in the archive.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Update one archived listing",
                "description": "Update certain properties about a listing.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/listingPatchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/archive/{listingId}/publish": {
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Publish one archived listing to the active pool",
                "description": "Moves this listing to the active listing pool, if it's possible.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings": {
            "get": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Get account listings",
                "description": "Get a scrollable cursor of listings for this account.",
                "parameters": [
                    {
                        "$ref": "#components/parameters/skip"
                    },
                    {
                        "$ref": "#components/parameters/limit"
                    },
                    {
                        "$ref": "#components/parameters/bumpedSince"
                    },
                    {
                        "$ref": "#components/parameters/createdSince"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listingScrollable"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Create one listing",
                "description": "Create a listing. Takes a listing document.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/listingResolvable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Client input error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Delete all listings",
                "description": "Delete all listings. You are not expected to call this endpoint often, so there is a 1-minute cooldown. You may specify an intent.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/listingDropRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings/batch": {
            "get": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Get batch operation limit",
                "description": "An auxiliary endpoint that just returns a limit counter.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Batch create listings",
                "description": "Batch create listings. This endpoint is rate limited to 10 req/minute.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/listingResolvable"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "An array of creation results corresponding to the order of documents in the request input.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/listingBatchCreateResult"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Client tried requesting too many items",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Batch delete listings",
                "description": "Batch delete listings. This endpoint is rate limited to 10 req/minute.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings/{listingId}": {
            "get": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Get one listing",
                "description": "Get one listing by ID, whether it exists in the active pool or in the archive.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Delete one listing",
                "description": "Delete one listing by ID, whether it exists in the active pool or in the archive.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Update one listing",
                "description": "Update certain properties about a listing.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/listingPatchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings/{listingId}/archive": {
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Move listing to the archive",
                "description": "Moves this listing to the archive.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings/{listingId}/promote": {
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Promote this listing",
                "description": "Promotes this listing if it is possible.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings/{listingId}/demote": {
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Demote this listing",
                "description": "Demotes this listing if it is possible.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/listingId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listing"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings/archiveAll": {
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Archive all listings",
                "description": "Archives (hides) all user listings.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v2/classifieds/listings/publishAll": {
            "post": {
                "tags": [
                    "classifieds"
                ],
                "summary": "Publish all listings",
                "description": "Publishes (unhides) all user listings that have been explicitly hidden by the user.",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "inventoryStatus": {
                "description": "Inventory status",
                "properties": {
                    "refresh_interval": {
                        "description": "The configured refresh interval for this inventory.",
                        "type": "integer"
                    },
                    "next_update": {
                        "description": "The UNIX timestamp of when the inventory may be refreshed again.",
                        "type": "integer"
                    },
                    "last_update": {
                        "description": "The UNIX timestamp of the last attempt to refresh the inventory. This value is used to gauge failures, as it does not guarantee an inventory was successfully updated (use the `timestamp` value for this). May be a very low number if the inventory has never been refreshed before.",
                        "type": "integer"
                    },
                    "timestamp": {
                        "description": "The UNIX timestamp of the last successful attempt to refresh the inventory. May be a very low number if the inventory has never been refreshed before.",
                        "type": "integer"
                    },
                    "current_time": {
                        "description": "The UNIX timestamp of the server's current time.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "inventoryValues": {
                "description": "Inventory values",
                "properties": {
                    "value": {
                        "description": "Community value for this inventory.",
                        "type": "float"
                    },
                    "market_value": {
                        "description": "SCM market value for this inventory.",
                        "type": "float"
                    }
                },
                "type": "object"
            },
            "classifiedsResourceLimits": {
                "properties": {
                    "listings": {
                        "properties": {
                            "used": {
                                "description": "The number of open listings.",
                                "type": "integer",
                                "example": "0"
                            },
                            "total": {
                                "description": "The max amount of listings allowed for this account.",
                                "type": "integer",
                                "example": "100"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "notificationMarkState": {
                "properties": {
                    "modified": {
                        "description": "The number of updated notifications.",
                        "type": "integer",
                        "example": "0"
                    }
                },
                "type": "object"
            },
            "cursor": {
                "properties": {
                    "skip": {
                        "description": "Specified cursor skip value.",
                        "type": "integer",
                        "example": "0"
                    },
                    "limit": {
                        "description": "Specified limit on returned documents.",
                        "type": "integer",
                        "example": "500"
                    },
                    "total": {
                        "description": "Total number of documents in this result set.",
                        "type": "integer",
                        "example": "1234"
                    }
                },
                "type": "object"
            },
            "responseError": {
                "properties": {
                    "message": {
                        "description": "Verbose error message for humans.",
                        "type": "string",
                        "example": "Error message."
                    },
                    "reason": {
                        "description": "Error code for robots. Can be relied upon for some error handling.",
                        "type": "string",
                        "example": "errorMessage"
                    }
                },
                "type": "object"
            },
            "appid": {
                "description": "Steam App ID.",
                "type": "integer",
                "example": "440"
            },
            "craftableEnum": {
                "description": "Craftability identifier.",
                "type": "string",
                "enum": [
                    "Craftable",
                    "Non-Craftable",
                    "1",
                    "0",
                    "true",
                    "false"
                ],
                "example": "Craftable"
            },
            "tradableEnum": {
                "description": "Tradability identifier.",
                "enum": [
                    "Tradable",
                    "Non-Tradable",
                    "1",
                    "0",
                    "true",
                    "false"
                ],
                "example": "Tradable",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "integer"
                    },
                    {
                        "type": "boolean"
                    }
                ]
            },
            "listingIntent": {
                "description": "Listing intent.",
                "type": "string",
                "enum": [
                    "buy",
                    "sell"
                ],
                "example": "buy"
            },
            "successBoolProp": {
                "description": "A success bool prop will be found on older APIs before we learned to use status codes to determine response success. They remain as a reminder of our failure.",
                "type": "integer",
                "enum": [
                    "1",
                    "0"
                ],
                "example": 1
            },
            "priceindex": {
                "description": "\nThe priceindex is an attribute that is applied to priced items that share the same\ndefinition index and quality. For most items, it is zero. Otherwise, the use varies by context:\n\nParticle effects: The priceindex will correspond to the ID of the particle as documented in the Valve Web API.\n\nCrates: The priceindex corresponds to the crate series.\n\nStrangifiers/Unusualifiers: The priceindex of a Strangifier/Unusualifier corresponds to the definition index of the\nitem it can be used on.\n\nChemistry Sets: The priceindex of a Chemistry Set is a hyphen-delimited string of two numbers; the\ndefinition index and the quality of the item. 1086-14 is the priceindex for a Collector's Festive\nWrangler.",
                "type": "string",
                "example": "0"
            },
            "userAgentStatus": {
                "description": "User agent status.",
                "properties": {
                    "status": {
                        "description": "A string value representing the state of the agent.",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "client": {
                        "description": "If status is active, the name of the client.",
                        "type": "string",
                        "example": "User Agent"
                    },
                    "expire_at": {
                        "description": "If status is active, the UNIX timestamp for client expiry.",
                        "type": "integer"
                    },
                    "current_time": {
                        "description": "If status is active, the UNIX timestamp of the server's current time.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "v1UserTrust": {
                "properties": {
                    "positive": {
                        "type": "integer"
                    },
                    "negative": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "v1UserVoting": {},
            "v1User": {
                "description": "user info doc",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "last_online": {
                        "type": "string"
                    },
                    "admin": {
                        "type": "string"
                    },
                    "donated": {
                        "type": "string"
                    },
                    "premium": {
                        "type": "string"
                    },
                    "premium_months_gifted": {
                        "type": "integer"
                    },
                    "integrations": {
                        "type": "string"
                    },
                    "bans": {
                        "type": "string"
                    },
                    "voting": {},
                    "inventory": {
                        "type": "string"
                    },
                    "trust": {}
                },
                "type": "object"
            },
            "currency": {
                "properties": {
                    "name": {
                        "description": "Currency name.",
                        "type": "string"
                    },
                    "quality": {
                        "description": "Currency quality.",
                        "type": "string"
                    },
                    "priceindex": {
                        "$ref": "#/components/schemas/priceindex"
                    },
                    "single": {
                        "description": "Singular form of the noun used for the suffix of the currency.",
                        "type": "string"
                    },
                    "plural": {
                        "description": "Plural form of the noun used for the suffix of the currency.",
                        "type": "string"
                    },
                    "round": {
                        "description": "Number of decimal places the price should be rounded to.",
                        "type": "integer"
                    },
                    "craftable": {
                        "description": "Item craftability.",
                        "type": "string",
                        "enum": [
                            "Craftable",
                            "Non-Craftable"
                        ]
                    },
                    "defindex": {
                        "description": "defindex of the currency item",
                        "type": "integer"
                    },
                    "active": {
                        "description": "if 1, then this currency should be used when rounding up\n    the currencies of an item. For example, the hat currency will have this value set to\n    0 because we do not want to price items in multiples of hats.",
                        "type": "integer"
                    },
                    "price": {
                        "$ref": "#/components/schemas/v4PricesEntry"
                    }
                },
                "type": "object"
            },
            "v1PriceHistoryNode": {
                "properties": {
                    "value": {
                        "description": "low-end of the price.",
                        "type": "number",
                        "example": "2.33"
                    },
                    "value_high": {
                        "description": "high-end of the price.",
                        "type": "number",
                        "example": "2.66"
                    },
                    "currency": {
                        "description": "currency string.",
                        "type": "string",
                        "example": "metal"
                    },
                    "timestamp": {
                        "description": "UNIX timestamp of price change.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "v1PriceHistoryResponse": {
                "properties": {
                    "success": {},
                    "history": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/v1PriceHistoryNode"
                        }
                    }
                },
                "type": "object"
            },
            "v4PricesEntry": {
                "properties": {
                    "currency": {
                        "description": "Internal currency name for the price",
                        "type": "string"
                    },
                    "value": {
                        "description": "Value of the item, in the given currency",
                        "type": "number"
                    },
                    "value_high": {
                        "description": "Upper bound value for the item. Only set if the item has a price range.",
                        "type": "number"
                    },
                    "value_raw": {
                        "description": "Item's value in the lowest currency without rounding. If raw is set to 2, this is the lower value if a high value exists. Otherwise, this is the average between the high and low value. Requires `raw`.",
                        "type": "number"
                    },
                    "value_raw_high": {
                        "description": "",
                        "type": "number"
                    },
                    "last_update": {
                        "description": "",
                        "type": "integer"
                    },
                    "difference": {
                        "description": "",
                        "type": "number"
                    },
                    "australium": {
                        "description": "If set, item is an australium weapon.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "v4PriceindexDict": {
                "additionalProperties": {
                    "$ref": "#/components/schemas/v4PricesEntry"
                }
            },
            "v4CraftableDict": {
                "properties": {
                    "Craftable": {
                        "$ref": "#/components/schemas/v4PriceindexDict"
                    },
                    "Non-Craftable": {
                        "$ref": "#/components/schemas/v4PriceindexDict"
                    }
                },
                "type": "object"
            },
            "v4TradableDict": {
                "properties": {
                    "Tradable": {
                        "$ref": "#/components/schemas/v4CraftableDict"
                    },
                    "Non-Tradable": {
                        "$ref": "#/components/schemas/v4CraftableDict"
                    }
                },
                "type": "object"
            },
            "v4PricesBaseItemDoc": {
                "properties": {
                    "defindex": {
                        "description": "An array of known defindexes for this item. Items may have more than one used defindex due to Valve shenanigans.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "prices": {
                        "description": "A dictionary of prices keyed by the quality integer.",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/v4TradableDict"
                        }
                    }
                },
                "type": "object"
            },
            "v4PricesResponse": {
                "properties": {
                    "success": {
                        "$ref": "#/components/schemas/successBoolProp"
                    },
                    "message": {
                        "description": "If success is 0, contains the reason for failure.",
                        "type": "string"
                    },
                    "current_time": {
                        "description": "The server time when the response was created.",
                        "type": "integer"
                    },
                    "raw_usd_value": {
                        "description": "The USD value of the smallest currency (i.e. Refined Metal).",
                        "type": "integer"
                    },
                    "usd_currency": {
                        "description": "The name of the smallest currency as it appears in the priceindex objects.",
                        "type": "string"
                    },
                    "usd_currency_index": {
                        "description": "The definition index of the USD currency.",
                        "type": "integer"
                    },
                    "items": {
                        "description": "A dictionary of items keyed by the base item name.",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/v4PricesBaseItemDoc"
                        }
                    }
                },
                "type": "object"
            },
            "schemaItem": {
                "description": "Schema item. Refer to Valve GetSchema documentation.",
                "type": "object"
            },
            "specialItemsResponse": {
                "properties": {
                    "response": {
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "impersonatedUser": {
                "properties": {
                    "steamid": {
                        "description": "SteamID64",
                        "type": "string"
                    },
                    "personaname": {
                        "description": "Persona name",
                        "type": "string"
                    },
                    "avatar": {
                        "description": "Avatar URL",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "listingScrollable": {
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/listing"
                        }
                    },
                    "cursor": {
                        "$ref": "#/components/schemas/cursor"
                    }
                },
                "type": "object"
            },
            "listing": {
                "properties": {
                    "id": {
                        "description": "Listing ID.",
                        "type": "string"
                    },
                    "appid": {
                        "description": "Steam appid.",
                        "type": "integer"
                    },
                    "bumpedAt": {
                        "description": "UNIX timestamp of listing bump.",
                        "type": "string"
                    },
                    "listedAt": {
                        "description": "UNIX timestamp of listing create.",
                        "type": "string"
                    },
                    "details": {
                        "description": "Listing details left by user.",
                        "type": "string"
                    },
                    "intent": {
                        "$ref": "#/components/schemas/listingIntent"
                    },
                    "steamid": {
                        "description": "Listing creator steamid.",
                        "type": "string"
                    },
                    "buyoutOnly": {
                        "description": "User only wants requests matching the buyout.",
                        "type": "boolean",
                        "nullable": "true"
                    },
                    "currencies": {
                        "$ref": "#/components/schemas/listingCurrencies"
                    },
                    "promoted": {
                        "description": "If this listing is promoted.",
                        "type": "boolean",
                        "nullable": "true"
                    },
                    "tradeOffersPreferred": {
                        "description": "User prefers trade offers.",
                        "type": "boolean",
                        "nullable": "true"
                    },
                    "count": {
                        "description": "When listing fold is occurring, similar listings by a user are collapsed into one.",
                        "type": "integer"
                    },
                    "item": {
                        "$ref": "#/components/schemas/itemDocument"
                    }
                },
                "type": "object"
            },
            "entity": {
                "description": "An item attribute that usually has an accompanying name, id, maybe a colour.",
                "properties": {
                    "name": {
                        "description": "Property name.",
                        "type": "string",
                        "example": "Unique"
                    },
                    "id": {
                        "description": "Property identifier.",
                        "type": "integer",
                        "example": 6
                    },
                    "color": {
                        "description": "Hex colour value including the #.",
                        "type": "string",
                        "example": "#FF7000"
                    }
                },
                "type": "object"
            },
            "itemDocument": {
                "description": "The V2 item document, returned in listing responses and used as an input in various V2 APIs. If using in a request body, only certain fields are processed in order to validate the properties are genuine. This documentation only includes the fields supported for request inputs; the API will return other fields in the document, however we do not promise they won't be subject to change. The properties described here are highly likely to remain unchanged.",
                "properties": {
                    "baseName": {
                        "description": "Base item name.",
                        "type": "string",
                        "example": "Team Captain"
                    },
                    "name": {
                        "description": "The 'full' item name, used as a SKU on backpack.tf (suggestions,, snapshots, etc.). This can include 'The' prefixes on non-special items. This field is ignored in request bodies.",
                        "type": "string",
                        "example": "The Team Captain"
                    },
                    "imageUrl": {
                        "description": "Image URL. This field is ignored in request bodies.",
                        "type": "string",
                        "example": "https://..."
                    },
                    "quantity": {
                        "description": "Item quantity. You can use this to specify how many items you would like to buy.",
                        "type": "integer"
                    },
                    "quality": {
                        "$ref": "#/components/schemas/entity"
                    },
                    "rarity": {
                        "$ref": "#/components/schemas/entity"
                    },
                    "paint": {
                        "$ref": "#/components/schemas/entity"
                    },
                    "particle": {
                        "$ref": "#/components/schemas/entity"
                    },
                    "elevatedQuality": {
                        "$ref": "#/components/schemas/entity"
                    }
                },
                "type": "object"
            },
            "itemResolvable": {
                "properties": {
                    "item": {
                        "description": "Base item name.",
                        "type": "string",
                        "example": "Team Captain"
                    },
                    "quality": {
                        "description": "Item quality. Can be an ID or a quality name.",
                        "type": "string|number",
                        "example": "Unique, 6"
                    },
                    "tradable": {
                        "$ref": "#/components/schemas/tradableEnum"
                    },
                    "craftable": {
                        "$ref": "#/components/schemas/craftableEnum"
                    },
                    "priceindex": {
                        "$ref": "#/components/schemas/priceindex"
                    }
                },
                "type": "object"
            },
            "listingResolvable": {
                "properties": {
                    "id": {
                        "description": "Item ID corresponding to an item from the user's inventory. If this is set, this resolvable is assumed to be a sell listing.",
                        "type": "integer",
                        "example": "0"
                    },
                    "item": {
                        "description": "Accepts item inputs from the previous listing create APIs, but you are recommended to use the new itemDocument format for forwards compatibility. If this is set, this resolvable is assumed to be a buy listing.",
                        "example": "(see Model information)",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/itemResolvable"
                            },
                            {
                                "$ref": "#/components/schemas/itemDocument"
                            }
                        ]
                    },
                    "details": {
                        "description": "Listing details.",
                        "type": "string",
                        "example": ""
                    },
                    "currencies": {
                        "$ref": "#/components/schemas/listingCurrencies"
                    }
                },
                "type": "object"
            },
            "listingBatchCreateResult": {
                "description": "A result object containing either a listing or an error.",
                "properties": {
                    "result": {
                        "$ref": "#/components/schemas/listing"
                    },
                    "error": {
                        "$ref": "#/components/schemas/responseError"
                    }
                },
                "type": "object"
            },
            "listingCurrencies": {
                "description": "A key-value map of currency IDs to values.",
                "example": {
                    "metal": 2.77,
                    "keys": 1
                },
                "additionalProperties": {
                    "type": "float",
                    "example": {
                        "metal": 2.77,
                        "keys": 1
                    }
                }
            },
            "listingPatchRequest": {
                "description": "Listing PATCH request body. If a field is not sent, no update will be performed for that field.",
                "properties": {
                    "currencies": {
                        "$ref": "#/components/schemas/listingCurrencies"
                    },
                    "details": {
                        "description": "New details for this listing.",
                        "type": "string"
                    },
                    "quantity": {
                        "description": "Item quantity. You can use this to specify how many items you would like to buy.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "listingDropRequest": {
                "properties": {
                    "intent": {
                        "description": "If specified, only drops listings with this intent.",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "parameters": {
            "listingId": {
                "name": "listingId",
                "in": "path",
                "description": "Listing identifier that usually corresponds to an item ID or the user's steamid and a hash of a listing SKU.",
                "schema": {
                    "type": "string"
                }
            },
            "limit": {
                "name": "limit",
                "in": "query",
                "description": "Number of results to return. If you want to scroll, it's recommended to omit this parameter to use the default setting and rely on the cursor response to determine how to parse the next page.",
                "schema": {
                    "type": "integer"
                }
            },
            "skip": {
                "name": "skip",
                "in": "query",
                "description": "Offset of results to return.",
                "schema": {
                    "type": "integer"
                }
            },
            "bumpedSince": {
                "name": "bumpedSince",
                "in": "query",
                "description": "A filter for listings bumped after the given UNIX timestamp.",
                "schema": {
                    "type": "integer"
                }
            },
            "createdSince": {
                "name": "createdSince",
                "in": "query",
                "description": "A filter for listings created after the given UNIX timestamp.",
                "schema": {
                    "type": "integer"
                }
            },
            "X-App-Context": {
                "name": "X-App-Context",
                "in": "header",
                "description": "In the future, backpack.tf API requests may require an app context, which is an appid. For forwards compatibility, it is recommended you set this to something (probably 440).",
                "schema": {
                    "type": "integer"
                }
            }
        },
        "securitySchemes": {
            "apiKey": {
                "type": "apiKey",
                "name": "key",
                "in": "query"
            },
            "userToken": {
                "type": "apiKey",
                "name": "X-Auth-Token",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "webapi-economy",
            "description": "(WebAPI) Economy APIs"
        },
        {
            "name": "webapi-users",
            "description": "(WebAPI) User APIs"
        },
        {
            "name": "classifieds",
            "description": "Classifieds listing management"
        },
        {
            "name": "alerts",
            "description": "Alerts management"
        },
        {
            "name": "notifications",
            "description": "Notifications management"
        },
        {
            "name": "agent",
            "description": "User agent management"
        }
    ],
    "externalDocs": {
        "description": "backpack.tf developer portal",
        "url": "https://next.backpack.tf/developer"
    }
}